#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

CBUFFER_START(cb)
    float4 _DestinationSize;  // x: 1.0 / dest width, y: 1.0 / dest height, zw: unused
CBUFFER_END

Texture2D<float4> _SourcePyramid;
RWTexture2D<float4> _DestinationPyramid;

SamplerState sampler_LinearClamp;

// 16x16 pixels with an 8x8 center that we will be blurring writing out. Each uint is two color
// channels packed together.
// The reason for separating channels is to reduce bank conflicts in the local data memory
// controller. A large stride will cause more threads to collide on the same memory bank.
groupshared uint gs_cacheR[128];
groupshared uint gs_cacheG[128];
groupshared uint gs_cacheB[128];
groupshared uint gs_cacheA[128];

float4 BlurPixels(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h, float4 i)
{
    return 0.27343750 * (e    )
         + 0.21875000 * (d + f)
         + 0.10937500 * (c + g)
         + 0.03125000 * (b + h)
         + 0.00390625 * (a + i);
}

void Store2Pixels(uint index, float4 pixel1, float4 pixel2)
{
    gs_cacheR[index] = f32tof16(pixel1.r) | f32tof16(pixel2.r) << 16;
    gs_cacheG[index] = f32tof16(pixel1.g) | f32tof16(pixel2.g) << 16;
    gs_cacheB[index] = f32tof16(pixel1.b) | f32tof16(pixel2.b) << 16;
    gs_cacheA[index] = f32tof16(pixel1.a) | f32tof16(pixel2.a) << 16;
}

void Load2Pixels(uint index, out float4 pixel1, out float4 pixel2)
{
    uint rr = gs_cacheR[index];
    uint gg = gs_cacheG[index];
    uint bb = gs_cacheB[index];
    uint aa = gs_cacheA[index];
    pixel1 = float4(f16tof32(rr      ), f16tof32(gg      ), f16tof32(bb      ), f16tof32(aa      ));
    pixel2 = float4(f16tof32(rr >> 16), f16tof32(gg >> 16), f16tof32(bb >> 16), f16tof32(aa >> 16));
}

void Store1Pixel(uint index, float4 pixel)
{
    gs_cacheR[index] = asuint(pixel.r);
    gs_cacheG[index] = asuint(pixel.g);
    gs_cacheB[index] = asuint(pixel.b);
    gs_cacheA[index] = asuint(pixel.a);
}

void Load1Pixel(uint index, out float4 pixel)
{
    pixel = asfloat(uint4(gs_cacheR[index], gs_cacheG[index], gs_cacheB[index], gs_cacheA[index]));
}

// Blur two pixels horizontally.  This reduces LDS reads and pixel unpacking.
void BlurHorizontally(uint outIndex, uint leftMostIndex)
{
    float4 s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    Load2Pixels(leftMostIndex + 0, s0, s1);
    Load2Pixels(leftMostIndex + 1, s2, s3);
    Load2Pixels(leftMostIndex + 2, s4, s5);
    Load2Pixels(leftMostIndex + 3, s6, s7);
    Load2Pixels(leftMostIndex + 4, s8, s9);

    Store1Pixel(outIndex    , BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8));
    Store1Pixel(outIndex + 1, BlurPixels(s1, s2, s3, s4, s5, s6, s7, s8, s9));
}

void BlurVertically(uint2 pixelCoord, uint topMostIndex)
{
    float4 s0, s1, s2, s3, s4, s5, s6, s7, s8;
    Load1Pixel(topMostIndex     , s0);
    Load1Pixel(topMostIndex +  8, s1);
    Load1Pixel(topMostIndex + 16, s2);
    Load1Pixel(topMostIndex + 24, s3);
    Load1Pixel(topMostIndex + 32, s4);
    Load1Pixel(topMostIndex + 40, s5);
    Load1Pixel(topMostIndex + 48, s6);
    Load1Pixel(topMostIndex + 56, s7);
    Load1Pixel(topMostIndex + 64, s8);

    float4 blurred = BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8);

    // Write to the final target
    _DestinationPyramid[pixelCoord] = blurred;
}

[numthreads(8, 8, 1)]
void CSMain(uint2 groupId : SV_GroupID, uint2 groupThreadId : SV_GroupThreadID, uint2 dispatchThreadId : SV_DispatchThreadID)
{
    // 因为每个线程组 group 包含 8x8 个线程, 每个线程代表 RT 上的一个像素
    // groupId.x 表示的是 RT 在 u 方向上的 线程组 index, groupId.y 表示的是 RT 在 v 方向上的 线程组 index
    // groupThreadId.xy 表示的是每个线程组内每个像素在 u 和 v 方向上的 index, 范围是 [0,7]

    // 下面这行代码的意思是将 RT 中的像素分成一个个 2x2 的像素块, 返回的是这个 2x2 像素块的左下角的像素的在屏幕范围上的 index
    int2 threadUL = (groupThreadId << 1) + (groupId << 3) - 4;
    float2 offset = float2(threadUL);

    // 2x2 像素块的 4 个像素的坐标
    float2 c00 = (offset + 0.5) * _DestinationSize.xy;
    float2 c10 = (offset + float2(1.0, 0.0) + 0.5) * _DestinationSize.xy;
    float2 c01 = (offset + float2(0.0, 1.0) + 0.5) * _DestinationSize.xy;
    float2 c11 = (offset + float2(1.0, 1.0) + 0.5) * _DestinationSize.xy;

    // 通过双线性过滤采样上 1 级的 Mip
    float4 p00 = _SourcePyramid.SampleLevel(sampler_LinearClamp, c00, 0.0);
    float4 p10 = _SourcePyramid.SampleLevel(sampler_LinearClamp, c10, 0.0);
    float4 p01 = _SourcePyramid.SampleLevel(sampler_LinearClamp, c01, 0.0);
    float4 p11 = _SourcePyramid.SampleLevel(sampler_LinearClamp, c11, 0.0);

    // Store the 4 downsampled pixels in LDS
    // LDS 是指 本地数据共享(Local Data Share), LDS 是一种用于在同一线程组内的着色器线程之间共享数据的高速存储器, 它通常用于需要在多个线程之间快速交换数据的场合
    // 将采样的每 2 个像素的颜色存储到 组共享内存(Group Shared Memory) 中, 这 2 个像素的每个通道从 32 位转换为 16 位, 并分别存储在一个 32 位的 uint 的低 16 位 和 高 16 位中
    // 每个线程组有 64 个线程, 每个线程采样了 4 个像素, 会将 2 个像素的同一个通道存储在一个 uint 中, 所以一共需要 (64 * 4 / 2 = 128) 个 uint
    uint destIdx = groupThreadId.x + (groupThreadId.y << 4u);
    Store2Pixels(destIdx , p00, p10);
    Store2Pixels(destIdx + 8u, p01, p11);

    // 两个作用:
    // 1. 确保所有内存操作（读或写）都已经完成，并且结果对同一线程组中的所有线程可见
    // 2. 阻塞当前线程，直到同一线程组中的所有线程都到达此同步点
    GroupMemoryBarrierWithGroupSync();

    // 横向模糊
    uint row = groupThreadId.y << 4u;
    BlurHorizontally(row + (groupThreadId.x << 1u), row + groupThreadId.x + (groupThreadId.x & 4u));

    GroupMemoryBarrierWithGroupSync();

    // 纵向模糊, 并将最终的结果输出
    BlurVertically(dispatchThreadId, (groupThreadId.y << 3u) + groupThreadId.x);
}
